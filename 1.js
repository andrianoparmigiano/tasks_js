"use strict"

let vec1 = [], vec2 = [];//Массивы для записи векторов
let f = new Map();//структура мап для проверок 1 и 2 векторов
f.set(1, false).set(2, false);

const _ = (id) => document.getElementById(id);//функция, возвращающая элемент по id
const er = (str, n) => {//функция вывода ошибок с параметрами строки ошибки(str) и номера вектора, в котором ошибка была замечена(n)
    f.set(n, false);//отметка некорректности в текущем массиве
    _("1").innerHTML = str;//вывод ошибки
    _("2").innerHTML = "";
    _("3").innerHTML = "";
    _("4").innerHTML = "";
};

const vector = (vec, id, n) => {//функция проверки элементов текущего вектора
    vec = _(id).value.split(" ");//разбиение строки на массив через каждый пробел
    for (let i = 0; i < vec.length; ++i) {//цикл удаления всех пустых строк в векторе
        if (vec[i] === "") {
            vec.splice(i, 1);
            --i;
        };
    };
    if (vec.length === 0) er(`Вы ничего не ввели в строке ${n}!`, n);//проверка на пустой вектор

    _("1").innerHTML = "";
    _("4").innerHTML = "";
    for (let i of vec.keys()) {//цикл проверки каждого элемента вектора
        vec[i] = vec[i].replace(/,/g, '.');//замена всех запятых в элементе на точку
        if (!isFinite(vec[i])) {//проверка: является ли элемент числом?
            er(`${i + 1}й элемент не является числом в векторе номер ${n}!`, n);//вывод ошибки с указанными номером элемента и номером вектора
            break;//выход из цикла при ошибке
        }
        else {//если элемент является числом
            f.set(n, true);//установка корректности элемента в текущем векторе
            vec[i] = +vec[i];//преобразование элемента из строки в число
        };
    };
    return vec;//возврат вектора
};

_("v1").oninput = () => { vec1 = vector(vec1, "v1", 1) };//вызов функции проверки элементов первого вектора при изменении ввода
//вызываем функцию обертку, в которой текущий вектор проходит обработку и проверку
_("v2").oninput = () => { vec2 = vector(vec2, "v2", 2) };//вызов функции проверки элементов второго вектора при изменении ввода

_("res").onclick = () => {//при нажатии на кнопку
    if (!f.get(1) || !f.get(2)) {//проверка корректности обоих векторов
        alert("Проверьте корректность введённых данных!!!");
    }
    else if (vec1.length !== vec2.length) {//сравнение размерности векторов
        alert("Размерность векторов не совпадает!\nНевозможно провести скалярное произведение!");
    }
    else {//если размерность векторов совпадает
        _("1").innerHTML = vec1.length;//вывод размерности векторов 
        _("2").innerHTML = `(${vec1})`;//вывод первого вектора
        _("3").innerHTML = `(${vec2})`;//вывод второго вектора
        _("4").innerHTML = `(${vec1}) * (${vec2}) = ${vec1.reduce((res, el, i) => res + el * vec2[i], 0)}`;//вывод результата скалярного произведения
    }
};